# app.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import torch
import seaborn as sns
import numpy as np
from wordcloud import WordCloud
from transformers import pipeline
from sklearn.feature_extraction.text import CountVectorizer

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤",
    page_icon="üß†",
    layout="wide"
)

st.title("üß† –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
st.caption("–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é NLP")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö --- #
@st.cache_data
def load_sample_data(lang='ru'):
    if lang == 'ru':
        data = {
            'text': [
                "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞!",
                "–ö–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ, –Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–¥–µ—Ä–∂–∞–ª–∞—Å—å",
                "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é, –æ—á–µ–Ω—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω",
                "–•–æ—Ä–æ—à–∏–π –º–∞–≥–∞–∑–∏–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é",
                "–£–∂–∞—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ —Å–æ–≤–µ—Ç—É—é"
            ],
            'rating': [5, 4, 2, 5, 1]
        }
    else:
        data = {
            'text': [
                "Great product, fast delivery!",
                "Good quality but shipping was late",
                "Very disappointed, not as described",
                "Nice shop, would recommend",
                "Terrible service, not satisfied"
            ],
            'rating': [5, 4, 2, 5, 1]
        }
    return pd.DataFrame(data)

# --- –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö --- #
data_source = st.radio("üì• –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", ["–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"])

if data_source == "–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö":
    df = load_sample_data('ru')
    reviews = df['text'].tolist()
    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(reviews)} –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
    st.dataframe(df.head())
else:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (CSV –∏–ª–∏ Excel)", type=["csv", "xlsx"])
    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)

            # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
            text_cols = [col for col in df.columns if 'text' in col.lower() or 'review' in col.lower()]
            if text_cols:
                reviews = df[text_cols[0]].dropna().astype(str).tolist()
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'text' –∏–ª–∏ 'review')")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    else:
        reviews = []

# --- –ê–Ω–∞–ª–∏–∑ --- #
if reviews:
    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"):
        language = st.radio("–Ø–∑—ã–∫ –æ—Ç–∑—ã–≤–æ–≤", ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"], index=0)
        max_reviews = st.slider("–°–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", 10, min(1000, len(reviews)), 100)
        show_details = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", value=True)

    reviews = reviews[:max_reviews]

    @st.cache_resource
    def load_models(lang):
        if lang == "–†—É—Å—Å–∫–∏–π":
            sentiment = pipeline("sentiment-analysis", model="blanchefort/rubert-base-cased-sentiment")
        else:
            sentiment = pipeline("sentiment-analysis")

        vectorizer = CountVectorizer(
            max_features=50,
            stop_words=["—ç—Ç–æ", "–∏", "–≤"] if lang == "–†—É—Å—Å–∫–∏–π" else ["the", "and", "in"]
        )
        return sentiment, vectorizer

    sentiment_model, vectorizer = load_models(language)

    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤..."):
            sentiments = sentiment_model(reviews)
            X = vectorizer.fit_transform(reviews)
            keywords = vectorizer.get_feature_names_out()

            results = []
            for i, (text, sent) in enumerate(zip(reviews, sentiments)):
                words = [w for w in text.lower().split() if w in keywords]
                results.append({
                    "–û—Ç–∑—ã–≤": text,
                    "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": sent['label'],
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": round(sent['score'], 3),
                    "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞": ", ".join(set(words))
                })

            df_results = pd.DataFrame(results)

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        fig1, ax1 = plt.subplots()
        df_results['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'].value_counts().plot(
            kind='bar',
            color=['lightgreen', 'salmon', 'gray'],
            ax=ax1
        )
        ax1.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        st.pyplot(fig1)

        # –û–±–ª–∞–∫–æ —Å–ª–æ–≤
        st.subheader("‚òÅÔ∏è –û–±–ª–∞–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        wordcloud = WordCloud(width=800, height=400).generate(" ".join(reviews))
        plt.figure(figsize=(12, 6))
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis("off")
        st.pyplot(plt)

        # –¢–∞–±–ª–∏—Ü–∞
        if show_details:
            st.subheader("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–∑—ã–≤—É")
            st.dataframe(df_results, use_container_width=True)

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        csv = df_results.to_csv(index=False).encode("utf-8")
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name="results.csv",
            mime="text/csv"
        )

# --- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è --- #
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    1. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª (CSV/Excel)
    2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑**
    4. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–µ–π
    5. –°–∫–∞—á–∞–π—Ç–µ CSV —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """)
